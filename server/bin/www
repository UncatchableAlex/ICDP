#!/usr/bin/env node

/**
 * Module dependencies.
 */
const auth = require("../creds.json");
var cookie = require("cookie");
const cookieParser = require("cookie-parser");
var app = require("../app");
var debug = require("debug")("api:server");
var http = require("http");
const { Utils } = require("../util/utils");
const { Queue } = require("../util/queue");
const { PopulateDatabase } = require("../util/populateDatabase.js");
const { emit } = require("process");
const queue = new Queue();
var rooms = 0;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "9000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require("socket.io")(server);
app.set("io", io);
io.on("connection", async (socket) => {
  var cookies = cookie.parse(socket.handshake.headers.cookie);
  var cookieAuthentication = cookieParser.signedCookie(
    cookies.myCookie,
    auth.cookieSignature
  );

  // Check to make sure cookie is valid
  if (cookieAuthentication === false) {
    alert("Sorry, inaccurate cookie credentials");
    console.log("Inaccurate cookie credentials");
    socket.disconnect();
  }

  // Check to ensure the cookie is no older than 8 hours (uses unix time)
  if (
    Math.abs(Date.parse(new Date()) - Date.parse(cookieAuthentication)) >=
    28800000
  ) {
    alert("Sorry your cookie is expired");
    console.log("Sorry your cookie is expired");
    socket.disconnect();
  }

  console.log("new user");
  queue.enqueue(socket);
  if (queue.getLength() >= 2) {
    // Get new gameId based on the databases current highest gameId
    let roomId = `room ${await PopulateDatabase.newGameId()}`;

    console.log(`created ${roomId}`);
    // Generate static game elements
    let tiles = Utils.get_rand_tile_seq();
    let cards = Utils.get_rand_devi_seq();
    let players = []; // Reset list of players

    for (let i = 0; i < 2; i++) {
      let s = queue.dequeue();
      s.join(roomId);

      // Get username from cookie (also check authentication again)
      var cookies = cookie.parse(socket.handshake.headers.cookie);
      var cookieAuthentication = cookieParser.signedCookie(
        cookies.myCookie,
        auth.cookieSignature
      );

      players.push(cookieAuthentication.split(":")[0]);

      // Set up events
      s.on("roll", () => {
        let num =
          2 + Math.floor(Math.random() * 6) + Math.floor(Math.random() * 6);
        io.to(roomId).emit("roll", num);
      });

      // TODO Need to grab cards from other players
      s.on("monopoly", () => {});

      s.on("pass turn", () => {
        io.to(roomId).emit("pass turn");
      });

      s.on("build", async (gameId, turn, hex) => {
        io.to(roomId).emit("build", hex);
        // Make call to database to add buildings:
        try {
          await PopulateDatabase[`add_${hex.type}`](gameId, turn, hex);
        } catch (error) {
          console.log("Attempted to add building to database: \n" + error);
        }
      });

      // Update the database with a year of plenty card that has been played:
      s.on("played devie", async (gameId, turn, playerName, devie) => {
        try {
          await PopulateDatabase.addDeviePlayed(
            gameId,
            turn,
            playerName,
            Utils.devie_convert(devie)
          );
        } catch (error) {
          console.log("Attempt to add development card to database\n" + error);
        }
      });

      // Purchased development card (update other players hands)
      s.on("bought devie", (playerId) => {
        console.log("Buy devie server receaved")
        io.to(roomId).emit("bought devie", playerId);
      });

      // Update hand in database (Must be a better way to package up the info than this)
      s.on(
        "hand",
        async (
          gameId,
          turn,
          playerName,
          wood,
          wheat,
          sheep,
          brick,
          ore,
          victoryPoint,
          monopoly,
          knight,
          yearOfPlenty,
          roadBuilding,
          victoryPoints
        ) => {
          try {
            await PopulateDatabase.addPlayerHand(
              gameId,
              turn,
              playerName,
              wood,
              wheat,
              sheep,
              brick,
              ore,
              victoryPoint,
              monopoly,
              knight,
              yearOfPlenty,
              roadBuilding,
              victoryPoints
            );
          } catch (error) {
            console.log("Attempted to add hand to database \n" + error);
          }
        }
      );

      s.on("Player Wins", (playerName) => {
        console.log("Server : Emitting player win to entire loby");
        io.to(roomId).emit("Player Wins", playerName);
      });

      // Emit initial development cards, board tile locations and playerID
      io.to(s.id).emit("join game", {
        tiles: tiles,
        cards: cards,
        playerId: i,
      });
    }
    io.to(roomId).emit("pass turn");

    // Make call to database to store game after game is deployed
    try {
      await PopulateDatabase.addGame(
        roomId,
        players[0],
        players[1],
        players[2],
        players[3],
        get_tile_seq_sql(tiles)
      );
    } catch (error) {
      console.log("Attempted to add game to database");
    }
  }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log("listening on port " + port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
